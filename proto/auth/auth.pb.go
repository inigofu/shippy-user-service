// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/auth/auth.proto

/*
Package auth is a generated protocol buffer package.

It is generated from these files:
	proto/auth/auth.proto

It has these top-level messages:
	User
	Request
	ResponseUser
	ResponseRole
	ResponseMenu
	ResponseToken
	Token
	Error
	Role
	Menu
	Badge
	Wrapper
	Atributes
	FormSchema
	Validator
	Buttons
*/
package auth

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type User struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Company  string `protobuf:"bytes,3,opt,name=company" json:"company,omitempty"`
	Email    string `protobuf:"bytes,4,opt,name=email" json:"email,omitempty"`
	Password string `protobuf:"bytes,5,opt,name=password" json:"password,omitempty"`
	Token    string `protobuf:"bytes,6,opt,name=token" json:"token,omitempty"`
	// @inject_tag: gorm:"many2many:user_roles;foreignkey:id;association_foreignkey:id;association_jointable_foreignkey:role_id;jointable_foreignkey:user_id;"
	Roles []*Role `protobuf:"bytes,7,rep,name=roles" json:"roles,omitempty" gorm:"many2many:user_roles;foreignkey:id;association_foreignkey:id;association_jointable_foreignkey:role_id;jointable_foreignkey:user_id;"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetCompany() string {
	if m != nil {
		return m.Company
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *User) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *User) GetRoles() []*Role {
	if m != nil {
		return m.Roles
	}
	return nil
}

type Request struct {
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ResponseUser struct {
	User   *User    `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Users  []*User  `protobuf:"bytes,2,rep,name=users" json:"users,omitempty"`
	Errors []*Error `protobuf:"bytes,3,rep,name=errors" json:"errors,omitempty"`
	Token  *Token   `protobuf:"bytes,4,opt,name=token" json:"token,omitempty"`
}

func (m *ResponseUser) Reset()                    { *m = ResponseUser{} }
func (m *ResponseUser) String() string            { return proto.CompactTextString(m) }
func (*ResponseUser) ProtoMessage()               {}
func (*ResponseUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ResponseUser) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *ResponseUser) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ResponseUser) GetErrors() []*Error {
	if m != nil {
		return m.Errors
	}
	return nil
}

func (m *ResponseUser) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

type ResponseRole struct {
	Role   *Role    `protobuf:"bytes,1,opt,name=role" json:"role,omitempty"`
	Roles  []*Role  `protobuf:"bytes,2,rep,name=roles" json:"roles,omitempty"`
	Errors []*Error `protobuf:"bytes,3,rep,name=errors" json:"errors,omitempty"`
}

func (m *ResponseRole) Reset()                    { *m = ResponseRole{} }
func (m *ResponseRole) String() string            { return proto.CompactTextString(m) }
func (*ResponseRole) ProtoMessage()               {}
func (*ResponseRole) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ResponseRole) GetRole() *Role {
	if m != nil {
		return m.Role
	}
	return nil
}

func (m *ResponseRole) GetRoles() []*Role {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *ResponseRole) GetErrors() []*Error {
	if m != nil {
		return m.Errors
	}
	return nil
}

type ResponseMenu struct {
	Menu   *Menu    `protobuf:"bytes,1,opt,name=menu" json:"menu,omitempty"`
	Menues []*Menu  `protobuf:"bytes,2,rep,name=menues" json:"menues,omitempty"`
	Errors []*Error `protobuf:"bytes,3,rep,name=errors" json:"errors,omitempty"`
}

func (m *ResponseMenu) Reset()                    { *m = ResponseMenu{} }
func (m *ResponseMenu) String() string            { return proto.CompactTextString(m) }
func (*ResponseMenu) ProtoMessage()               {}
func (*ResponseMenu) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ResponseMenu) GetMenu() *Menu {
	if m != nil {
		return m.Menu
	}
	return nil
}

func (m *ResponseMenu) GetMenues() []*Menu {
	if m != nil {
		return m.Menues
	}
	return nil
}

func (m *ResponseMenu) GetErrors() []*Error {
	if m != nil {
		return m.Errors
	}
	return nil
}

type ResponseToken struct {
	Token  *Token   `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	User   *User    `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	Errors []*Error `protobuf:"bytes,3,rep,name=errors" json:"errors,omitempty"`
}

func (m *ResponseToken) Reset()                    { *m = ResponseToken{} }
func (m *ResponseToken) String() string            { return proto.CompactTextString(m) }
func (*ResponseToken) ProtoMessage()               {}
func (*ResponseToken) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ResponseToken) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *ResponseToken) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *ResponseToken) GetErrors() []*Error {
	if m != nil {
		return m.Errors
	}
	return nil
}

type Token struct {
	Token  string   `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Valid  bool     `protobuf:"varint,2,opt,name=valid" json:"valid,omitempty"`
	Errors []*Error `protobuf:"bytes,3,rep,name=errors" json:"errors,omitempty"`
}

func (m *Token) Reset()                    { *m = Token{} }
func (m *Token) String() string            { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()               {}
func (*Token) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Token) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Token) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *Token) GetErrors() []*Error {
	if m != nil {
		return m.Errors
	}
	return nil
}

type Error struct {
	Code        int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Error) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Error) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type Role struct {
	Id    string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name  string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Users []*User `protobuf:"bytes,3,rep,name=users" json:"users,omitempty"`
	// @inject_tag: gorm:"many2many:role_menus;foreignkey:id;association_foreignkey:id;association_jointable_foreignkey:menu_id;jointable_foreignkey:role_id;"
	Menues []*Menu `protobuf:"bytes,4,rep,name=menues" json:"menues,omitempty" gorm:"many2many:role_menus;foreignkey:id;association_foreignkey:id;association_jointable_foreignkey:menu_id;jointable_foreignkey:role_id;"`
}

func (m *Role) Reset()                    { *m = Role{} }
func (m *Role) String() string            { return proto.CompactTextString(m) }
func (*Role) ProtoMessage()               {}
func (*Role) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Role) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Role) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Role) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *Role) GetMenues() []*Menu {
	if m != nil {
		return m.Menues
	}
	return nil
}

type Menu struct {
	Id      string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name    string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Url     string   `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
	Badge   *Badge   `protobuf:"bytes,4,opt,name=badge" json:"badge,omitempty"`
	Wrapper *Wrapper `protobuf:"bytes,5,opt,name=wrapper" json:"wrapper,omitempty"`
	Title   bool     `protobuf:"varint,6,opt,name=title" json:"title,omitempty"`
	// @inject_tag: gorm:"many2many:menu_childrens;foreignkey:id;association_foreignkey:id;association_jointable_foreignkey:children_id;jointable_foreignkey:parent_id;"
	Children  []*Menu `protobuf:"bytes,7,rep,name=children" json:"children,omitempty" gorm:"many2many:menu_childrens;foreignkey:id;association_foreignkey:id;association_jointable_foreignkey:children_id;jointable_foreignkey:parent_id;"`
	Icon      string  `protobuf:"bytes,8,opt,name=icon" json:"icon,omitempty"`
	Roles     []*Role `protobuf:"bytes,9,rep,name=roles" json:"roles,omitempty"`
	BadgeID   string  `protobuf:"bytes,10,opt,name=badgeID" json:"badgeID,omitempty"`
	WrapperID string  `protobuf:"bytes,11,opt,name=wrapperID" json:"wrapperID,omitempty"`
}

func (m *Menu) Reset()                    { *m = Menu{} }
func (m *Menu) String() string            { return proto.CompactTextString(m) }
func (*Menu) ProtoMessage()               {}
func (*Menu) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Menu) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Menu) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Menu) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Menu) GetBadge() *Badge {
	if m != nil {
		return m.Badge
	}
	return nil
}

func (m *Menu) GetWrapper() *Wrapper {
	if m != nil {
		return m.Wrapper
	}
	return nil
}

func (m *Menu) GetTitle() bool {
	if m != nil {
		return m.Title
	}
	return false
}

func (m *Menu) GetChildren() []*Menu {
	if m != nil {
		return m.Children
	}
	return nil
}

func (m *Menu) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *Menu) GetRoles() []*Role {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *Menu) GetBadgeID() string {
	if m != nil {
		return m.BadgeID
	}
	return ""
}

func (m *Menu) GetWrapperID() string {
	if m != nil {
		return m.WrapperID
	}
	return ""
}

type Badge struct {
	Id      string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Variant string `protobuf:"bytes,2,opt,name=variant" json:"variant,omitempty"`
	Text    string `protobuf:"bytes,3,opt,name=text" json:"text,omitempty"`
}

func (m *Badge) Reset()                    { *m = Badge{} }
func (m *Badge) String() string            { return proto.CompactTextString(m) }
func (*Badge) ProtoMessage()               {}
func (*Badge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Badge) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Badge) GetVariant() string {
	if m != nil {
		return m.Variant
	}
	return ""
}

func (m *Badge) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type Wrapper struct {
	Id          string     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Element     string     `protobuf:"bytes,2,opt,name=element" json:"element,omitempty"`
	Atributes   *Atributes `protobuf:"bytes,3,opt,name=atributes" json:"atributes,omitempty"`
	AtributesID string     `protobuf:"bytes,4,opt,name=atributesID" json:"atributesID,omitempty"`
}

func (m *Wrapper) Reset()                    { *m = Wrapper{} }
func (m *Wrapper) String() string            { return proto.CompactTextString(m) }
func (*Wrapper) ProtoMessage()               {}
func (*Wrapper) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Wrapper) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Wrapper) GetElement() string {
	if m != nil {
		return m.Element
	}
	return ""
}

func (m *Wrapper) GetAtributes() *Atributes {
	if m != nil {
		return m.Atributes
	}
	return nil
}

func (m *Wrapper) GetAtributesID() string {
	if m != nil {
		return m.AtributesID
	}
	return ""
}

type Atributes struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *Atributes) Reset()                    { *m = Atributes{} }
func (m *Atributes) String() string            { return proto.CompactTextString(m) }
func (*Atributes) ProtoMessage()               {}
func (*Atributes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Atributes) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type FormSchema struct {
	// @inject_tag: `gorm:""default:'none'""`//Type of field
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// @inject_tag: `gorm:""default:'none'""`//Label of field
	Label string `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	// @inject_tag: `gorm:""default:'none'""`//Name of property in the model
	Model string `protobuf:"bytes,3,opt,name=model" json:"model,omitempty"`
	// @inject_tag: `gorm:""default:'auto-generated'""`//id of the field. If not set, will be auto-generated from the slugified version of either: schema.inputName, schema.label or schema.model, in that order. If the fieldIdPrefix option is set, it's value will be prepended to both manual & auto-generated ids.
	Id string `protobuf:"bytes,4,opt,name=id" json:"id,omitempty"`
	// @inject_tag: `gorm:""default:'false'""`//is it a featured (bold) field? It can be a function too.
	Featured bool `protobuf:"varint,5,opt,name=featured" json:"featured,omitempty"`
	// @inject_tag: `gorm:""default:'true'""`//if false, field will be hidden. It can be a function too.
	Visible bool `protobuf:"varint,6,opt,name=visible" json:"visible,omitempty"`
	// @inject_tag: `gorm:""default:'false'""`//if true, field will be disabled. It can be a function too.
	Disabled bool `protobuf:"varint,7,opt,name=disabled" json:"disabled,omitempty"`
	// @inject_tag: `gorm:""default:'false'""`//if true, must be fill this field (need to use validator).
	Required bool `protobuf:"varint,8,opt,name=required" json:"required,omitempty"`
	// @inject_tag: `gorm:""default:'false'""`//if true, it will visible only if multiple is true in component attributes
	Multi bool `protobuf:"varint,9,opt,name=multi" json:"multi,omitempty"`
	// @inject_tag: `gorm:""default:'none'""`//Default value of the field (use when create a new model)
	Default string `protobuf:"bytes,10,opt,name=default" json:"default,omitempty"`
	// @inject_tag: `gorm:""default:'none'""`//show this hint below the field
	Hint string `protobuf:"bytes,11,opt,name=hint" json:"hint,omitempty"`
	// @inject_tag: `gorm:""default:'none'""`//set name attribute to input field. You can use it to generate normal HTML Forms and submit the field values to server-side. Example
	InputName string `protobuf:"bytes,12,opt,name=inputName" json:"inputName,omitempty"`
	// @inject_tag: `gorm:""default:'none'""`//show this help if mouse hover the question icon before the caption of field. You can use HTML elements too.
	Help string `protobuf:"bytes,13,opt,name=help" json:"help,omitempty"`
	// @inject_tag: `gorm:""default:'none'""`//Validator for value. It can be an array of functions too.
	Validator []*Validator `protobuf:"bytes,14,rep,name=validator" json:"validator,omitempty"`
	// @inject_tag: `gorm:""default:'none'""`//custom css style classes. It will be appended to the .from-group
	StyleClasses []string `protobuf:"bytes,15,rep,name=styleClasses" json:"styleClasses,omitempty"`
	// @inject_tag: `gorm:""default:'none'""`//Array of button objects. This is useful if you need some helper function to fill the field. (E.g. generate password, get GPS location..etc)*
	Buttons []*Buttons `protobuf:"bytes,16,rep,name=buttons" json:"buttons,omitempty"`
}

func (m *FormSchema) Reset()                    { *m = FormSchema{} }
func (m *FormSchema) String() string            { return proto.CompactTextString(m) }
func (*FormSchema) ProtoMessage()               {}
func (*FormSchema) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *FormSchema) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *FormSchema) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *FormSchema) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *FormSchema) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FormSchema) GetFeatured() bool {
	if m != nil {
		return m.Featured
	}
	return false
}

func (m *FormSchema) GetVisible() bool {
	if m != nil {
		return m.Visible
	}
	return false
}

func (m *FormSchema) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *FormSchema) GetRequired() bool {
	if m != nil {
		return m.Required
	}
	return false
}

func (m *FormSchema) GetMulti() bool {
	if m != nil {
		return m.Multi
	}
	return false
}

func (m *FormSchema) GetDefault() string {
	if m != nil {
		return m.Default
	}
	return ""
}

func (m *FormSchema) GetHint() string {
	if m != nil {
		return m.Hint
	}
	return ""
}

func (m *FormSchema) GetInputName() string {
	if m != nil {
		return m.InputName
	}
	return ""
}

func (m *FormSchema) GetHelp() string {
	if m != nil {
		return m.Help
	}
	return ""
}

func (m *FormSchema) GetValidator() []*Validator {
	if m != nil {
		return m.Validator
	}
	return nil
}

func (m *FormSchema) GetStyleClasses() []string {
	if m != nil {
		return m.StyleClasses
	}
	return nil
}

func (m *FormSchema) GetButtons() []*Buttons {
	if m != nil {
		return m.Buttons
	}
	return nil
}

type Validator struct {
	Id        string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Validator string `protobuf:"bytes,2,opt,name=validator" json:"validator,omitempty"`
}

func (m *Validator) Reset()                    { *m = Validator{} }
func (m *Validator) String() string            { return proto.CompactTextString(m) }
func (*Validator) ProtoMessage()               {}
func (*Validator) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Validator) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Validator) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

type Buttons struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Text string `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
}

func (m *Buttons) Reset()                    { *m = Buttons{} }
func (m *Buttons) String() string            { return proto.CompactTextString(m) }
func (*Buttons) ProtoMessage()               {}
func (*Buttons) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Buttons) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Buttons) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func init() {
	proto.RegisterType((*User)(nil), "auth.User")
	proto.RegisterType((*Request)(nil), "auth.Request")
	proto.RegisterType((*ResponseUser)(nil), "auth.ResponseUser")
	proto.RegisterType((*ResponseRole)(nil), "auth.ResponseRole")
	proto.RegisterType((*ResponseMenu)(nil), "auth.ResponseMenu")
	proto.RegisterType((*ResponseToken)(nil), "auth.ResponseToken")
	proto.RegisterType((*Token)(nil), "auth.Token")
	proto.RegisterType((*Error)(nil), "auth.Error")
	proto.RegisterType((*Role)(nil), "auth.Role")
	proto.RegisterType((*Menu)(nil), "auth.Menu")
	proto.RegisterType((*Badge)(nil), "auth.Badge")
	proto.RegisterType((*Wrapper)(nil), "auth.Wrapper")
	proto.RegisterType((*Atributes)(nil), "auth.Atributes")
	proto.RegisterType((*FormSchema)(nil), "auth.FormSchema")
	proto.RegisterType((*Validator)(nil), "auth.Validator")
	proto.RegisterType((*Buttons)(nil), "auth.Buttons")
}

func init() { proto.RegisterFile("proto/auth/auth.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 975 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xcd, 0x6e, 0x1b, 0x37,
	0x10, 0xb6, 0xa4, 0x95, 0x56, 0x1a, 0xd9, 0x49, 0xc0, 0xba, 0x00, 0xe1, 0x06, 0x85, 0xcb, 0x02,
	0x8d, 0xdb, 0xc2, 0x6e, 0x61, 0x9f, 0x7a, 0xe8, 0xc1, 0x89, 0x53, 0xc3, 0x87, 0xf4, 0xc0, 0xfe,
	0x5e, 0x29, 0xed, 0xa4, 0x5a, 0x94, 0xda, 0xdd, 0x90, 0xdc, 0xb8, 0xbe, 0xf7, 0x21, 0xfa, 0x14,
	0x3d, 0xf5, 0x58, 0xa0, 0xaf, 0x56, 0x70, 0xc8, 0xfd, 0x91, 0x13, 0x19, 0xba, 0xd8, 0x9c, 0x6f,
	0x86, 0x9c, 0x6f, 0x7e, 0x57, 0xf0, 0x61, 0x65, 0x4a, 0x57, 0x7e, 0xa5, 0x6a, 0xb7, 0xa2, 0x3f,
	0x67, 0x24, 0xb3, 0xc4, 0x9f, 0xc5, 0xdf, 0x03, 0x48, 0x7e, 0xb2, 0x68, 0xd8, 0x23, 0x18, 0xe6,
	0x19, 0x1f, 0x1c, 0x0f, 0x4e, 0x66, 0x72, 0x98, 0x67, 0x8c, 0x41, 0x52, 0xa8, 0x35, 0xf2, 0x21,
	0x21, 0x74, 0x66, 0x1c, 0xd2, 0x65, 0xb9, 0xae, 0x54, 0x71, 0xc7, 0x47, 0x04, 0x37, 0x22, 0x3b,
	0x84, 0x31, 0xae, 0x55, 0xae, 0x79, 0x42, 0x78, 0x10, 0xd8, 0x11, 0x4c, 0x2b, 0x65, 0xed, 0x6d,
	0x69, 0x32, 0x3e, 0x26, 0x45, 0x2b, 0xfb, 0x1b, 0xae, 0xfc, 0x1d, 0x0b, 0x3e, 0x09, 0x37, 0x48,
	0x60, 0xc7, 0x30, 0x36, 0xa5, 0x46, 0xcb, 0xd3, 0xe3, 0xd1, 0xc9, 0xfc, 0x1c, 0xce, 0x88, 0xb0,
	0x2c, 0x35, 0xca, 0xa0, 0x10, 0x33, 0x48, 0x25, 0xbe, 0xa9, 0xd1, 0x3a, 0xf1, 0xd7, 0x00, 0xf6,
	0x25, 0xda, 0xaa, 0x2c, 0x2c, 0x52, 0x0c, 0x1f, 0x43, 0x52, 0x5b, 0x34, 0x14, 0x45, 0x7b, 0xd9,
	0x6b, 0x24, 0xe1, 0xfe, 0x75, 0xff, 0xdf, 0xf2, 0x61, 0xff, 0x75, 0x32, 0x08, 0x0a, 0xf6, 0x29,
	0x4c, 0xd0, 0x98, 0xd2, 0x58, 0x3e, 0x22, 0x93, 0x79, 0x30, 0x79, 0xe9, 0x31, 0x19, 0x55, 0xec,
	0x93, 0x86, 0x7a, 0x42, 0x7e, 0xa2, 0xcd, 0x8f, 0x1e, 0x8a, 0x71, 0x88, 0xba, 0x63, 0xe6, 0xc9,
	0x7b, 0x66, 0x9e, 0xfe, 0x26, 0x33, 0x0a, 0x8b, 0xf0, 0x2e, 0xee, 0xe1, 0x96, 0xb8, 0x77, 0x62,
	0x26, 0x6e, 0x3b, 0xb7, 0xaf, 0xb0, 0xa8, 0xbd, 0xdb, 0x35, 0x16, 0xf5, 0xa6, 0x5b, 0xaf, 0x91,
	0x84, 0x33, 0x01, 0x13, 0xff, 0xff, 0xbe, 0x5f, 0xb2, 0x88, 0x9a, 0x5d, 0x1d, 0x1f, 0x34, 0x8e,
	0x29, 0x0f, 0x5d, 0x8e, 0x06, 0xdb, 0x72, 0xd4, 0x56, 0x6b, 0xb8, 0xa5, 0x5a, 0x3b, 0x39, 0xfe,
	0x15, 0xc6, 0xc1, 0xe1, 0x61, 0xdf, 0x61, 0xdb, 0x4f, 0x87, 0x30, 0x7e, 0xab, 0x74, 0x9e, 0x91,
	0x93, 0xa9, 0x0c, 0xc2, 0x6e, 0x2f, 0x7f, 0x0b, 0x63, 0x02, 0xfc, 0x24, 0x2c, 0xcb, 0x2c, 0xd4,
	0x6e, 0x2c, 0xe9, 0xcc, 0x8e, 0x61, 0x9e, 0xa1, 0x5d, 0x9a, 0xbc, 0x72, 0x79, 0x59, 0xc4, 0x21,
	0xe9, 0x43, 0xa2, 0x82, 0x84, 0x2a, 0xbf, 0xcb, 0x5c, 0xb5, 0x7d, 0x39, 0xda, 0xd6, 0x97, 0x5d,
	0xa1, 0x92, 0x6d, 0x85, 0x12, 0xff, 0x0c, 0x21, 0xa1, 0xaa, 0xef, 0xe2, 0xf2, 0x09, 0x8c, 0x6a,
	0xa3, 0xe3, 0x18, 0xfb, 0xa3, 0xaf, 0xd8, 0x42, 0x65, 0xbf, 0xe1, 0x66, 0x57, 0x3f, 0xf7, 0x90,
	0x0c, 0x1a, 0xf6, 0x0c, 0xd2, 0x5b, 0xa3, 0xaa, 0x0a, 0x0d, 0x8d, 0xf3, 0xfc, 0xfc, 0x20, 0x18,
	0xfd, 0x12, 0x40, 0xd9, 0x68, 0xa9, 0x18, 0xb9, 0xd3, 0x48, 0xc3, 0x3d, 0x95, 0x41, 0x60, 0x9f,
	0xc1, 0x74, 0xb9, 0xca, 0x75, 0x66, 0xb0, 0xd8, 0x9c, 0x6f, 0x0a, 0xa3, 0xd5, 0x79, 0xbe, 0xf9,
	0xb2, 0x2c, 0xf8, 0x34, 0xf0, 0xf5, 0xe7, 0x6e, 0x40, 0x66, 0xdb, 0x06, 0x84, 0x43, 0x4a, 0x2c,
	0x6f, 0xae, 0x38, 0x84, 0xe5, 0x14, 0x45, 0xf6, 0x14, 0x66, 0x91, 0xd8, 0xcd, 0x15, 0x9f, 0x93,
	0xae, 0x03, 0xc4, 0x4b, 0x18, 0x53, 0x90, 0xef, 0xa4, 0x8d, 0x43, 0xfa, 0x56, 0x99, 0x5c, 0x15,
	0x2e, 0x66, 0xae, 0x11, 0x3d, 0x41, 0x87, 0x7f, 0xb8, 0x98, 0x3d, 0x3a, 0x8b, 0x3f, 0x07, 0x90,
	0xc6, 0x3c, 0xbc, 0xef, 0x25, 0xd4, 0xb8, 0xc6, 0xee, 0xa5, 0x28, 0xb2, 0x53, 0x98, 0x29, 0x67,
	0xf2, 0x45, 0xed, 0xd0, 0xd2, 0x73, 0xf3, 0xf3, 0xc7, 0x21, 0xb4, 0xcb, 0x06, 0x96, 0x9d, 0x85,
	0x6f, 0xbb, 0x56, 0xb8, 0xb9, 0x8a, 0xcb, 0xb6, 0x0f, 0x89, 0x8f, 0x60, 0xd6, 0xde, 0xbc, 0xcf,
	0x43, 0xfc, 0x3b, 0x02, 0xf8, 0xae, 0x34, 0xeb, 0x1f, 0x96, 0x2b, 0x5c, 0x2b, 0x0a, 0xe3, 0xae,
	0xc2, 0x68, 0x40, 0x67, 0x5f, 0x39, 0xad, 0x16, 0xa8, 0x23, 0xd1, 0x20, 0x78, 0x74, 0x5d, 0x66,
	0xd8, 0xf4, 0x4b, 0x10, 0xe2, 0xf3, 0x49, 0x1b, 0xe6, 0x11, 0x4c, 0x5f, 0xa3, 0x72, 0xb5, 0xc1,
	0xb0, 0xee, 0xa7, 0xb2, 0x95, 0x29, 0x99, 0xb9, 0xcd, 0x17, 0x6d, 0x4f, 0x34, 0xa2, 0xbf, 0x95,
	0xe5, 0x56, 0x2d, 0x34, 0x66, 0x3c, 0x0d, 0xb7, 0x1a, 0xd9, 0xeb, 0x0c, 0xbe, 0xa9, 0x73, 0xff,
	0xe2, 0x34, 0xe8, 0x1a, 0x99, 0x38, 0xd5, 0xda, 0xe5, 0x7c, 0x16, 0x7a, 0x8c, 0x04, 0xef, 0x27,
	0xc3, 0xd7, 0xaa, 0xd6, 0xae, 0xe9, 0x82, 0x28, 0xfa, 0x68, 0x57, 0x79, 0xe1, 0x62, 0x03, 0xd0,
	0xd9, 0x77, 0x46, 0x5e, 0x54, 0xb5, 0xfb, 0xde, 0x8f, 0xc7, 0x7e, 0xe8, 0x8c, 0x16, 0xa0, 0x1b,
	0xa8, 0x2b, 0x7e, 0x10, 0x6f, 0xa0, 0xae, 0x7c, 0xc1, 0x68, 0x87, 0x28, 0x57, 0x1a, 0xfe, 0x88,
	0x7a, 0x31, 0x16, 0xec, 0xe7, 0x06, 0x96, 0x9d, 0x05, 0x13, 0xb0, 0x6f, 0xdd, 0x9d, 0xc6, 0x17,
	0x5a, 0x59, 0x8b, 0x96, 0x3f, 0x3e, 0x1e, 0x9d, 0xcc, 0xe4, 0x06, 0xe6, 0xa7, 0x6a, 0x51, 0x3b,
	0x57, 0x16, 0x96, 0x3f, 0xa1, 0x07, 0xe3, 0x54, 0x3d, 0x0f, 0xa0, 0x6c, 0xb4, 0xe2, 0x1b, 0x98,
	0xb5, 0x4e, 0xde, 0xe9, 0xb1, 0xa7, 0x7d, 0x62, 0xa1, 0x78, 0x1d, 0x20, 0x4e, 0x21, 0x8d, 0xcf,
	0xbd, 0x6f, 0x3b, 0x50, 0x33, 0x0f, 0xbb, 0x66, 0x3e, 0xff, 0x2f, 0x81, 0xe4, 0xb2, 0x76, 0x2b,
	0xf6, 0x05, 0x4c, 0x5e, 0x18, 0x54, 0x0e, 0x59, 0x6f, 0x29, 0x1d, 0xb1, 0x38, 0x7d, 0xbd, 0x6f,
	0xaf, 0xd8, 0x63, 0xcf, 0x60, 0x74, 0x8d, 0x6e, 0x07, 0xc3, 0x53, 0x98, 0x5c, 0xa3, 0xbb, 0xd4,
	0x9a, 0x1d, 0x34, 0x7a, 0xfa, 0xa0, 0x6f, 0x31, 0xff, 0x3c, 0x72, 0xe9, 0x3f, 0xfc, 0xc1, 0xa6,
	0x25, 0x7d, 0x02, 0xc4, 0x1e, 0xfb, 0x1a, 0xf6, 0xaf, 0xd1, 0x79, 0x0b, 0xbf, 0x52, 0xec, 0x43,
	0x5c, 0xbc, 0x81, 0xd8, 0x63, 0x17, 0x70, 0x10, 0x73, 0x1a, 0x3f, 0x5c, 0xfd, 0x2f, 0xd5, 0x36,
	0x37, 0x67, 0x00, 0x21, 0x2b, 0xb4, 0xe1, 0x7b, 0xbb, 0xe8, 0xbe, 0x13, 0x8f, 0x89, 0x3d, 0xf6,
	0x25, 0xa4, 0xd7, 0xe8, 0x76, 0x34, 0x3e, 0x87, 0x79, 0xc8, 0x8e, 0xa4, 0xb5, 0xf6, 0x70, 0x8a,
	0xe2, 0x9d, 0x96, 0x10, 0xed, 0xff, 0xde, 0x56, 0xdd, 0x12, 0x75, 0x20, 0xb4, 0xa3, 0xf1, 0x05,
	0x25, 0xf5, 0x52, 0xeb, 0x57, 0xe1, 0x07, 0xc1, 0xc3, 0x8c, 0xc2, 0xa5, 0xc5, 0x84, 0x7e, 0x64,
	0x5e, 0xfc, 0x1f, 0x00, 0x00, 0xff, 0xff, 0xf5, 0xe8, 0xbd, 0xed, 0x7d, 0x0a, 0x00, 0x00,
}
