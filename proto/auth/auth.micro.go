// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/auth/auth.proto

/*
Package auth is a generated protocol buffer package.

It is generated from these files:
	proto/auth/auth.proto

It has these top-level messages:
	User
	Request
	ResponseUser
	ResponseRole
	ResponseMenu
	ResponseToken
	Token
	Error
	Role
	Menu
	Badge
	Wrapper
	Atributes
*/
package auth

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Auth service

type AuthClient interface {
	Create(ctx context.Context, in *User, opts ...client.CallOption) (*ResponseUser, error)
	Get(ctx context.Context, in *User, opts ...client.CallOption) (*ResponseUser, error)
	GetAll(ctx context.Context, in *Request, opts ...client.CallOption) (*ResponseUser, error)
	Auth(ctx context.Context, in *User, opts ...client.CallOption) (*ResponseToken, error)
}

type authClient struct {
	c           client.Client
	serviceName string
}

func NewAuthClient(serviceName string, c client.Client) AuthClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "auth"
	}
	return &authClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *authClient) Create(ctx context.Context, in *User, opts ...client.CallOption) (*ResponseUser, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.Create", in)
	out := new(ResponseUser)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Get(ctx context.Context, in *User, opts ...client.CallOption) (*ResponseUser, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.Get", in)
	out := new(ResponseUser)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetAll(ctx context.Context, in *Request, opts ...client.CallOption) (*ResponseUser, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.GetAll", in)
	out := new(ResponseUser)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Auth(ctx context.Context, in *User, opts ...client.CallOption) (*ResponseToken, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.Auth", in)
	out := new(ResponseToken)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Auth service

type AuthHandler interface {
	Create(context.Context, *User, *ResponseUser) error
	Get(context.Context, *User, *ResponseUser) error
	GetAll(context.Context, *Request, *ResponseUser) error
	Auth(context.Context, *User, *ResponseToken) error
}

func RegisterAuthHandler(s server.Server, hdlr AuthHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Auth{hdlr}, opts...))
}

type Auth struct {
	AuthHandler
}

func (h *Auth) Create(ctx context.Context, in *User, out *ResponseUser) error {
	return h.AuthHandler.Create(ctx, in, out)
}

func (h *Auth) Get(ctx context.Context, in *User, out *ResponseUser) error {
	return h.AuthHandler.Get(ctx, in, out)
}

func (h *Auth) GetAll(ctx context.Context, in *Request, out *ResponseUser) error {
	return h.AuthHandler.GetAll(ctx, in, out)
}

func (h *Auth) Auth(ctx context.Context, in *User, out *ResponseToken) error {
	return h.AuthHandler.Auth(ctx, in, out)
}

// Client API for UserData service

type UserDataClient interface {
	GetUserMenus(ctx context.Context, in *User, opts ...client.CallOption) (*ResponseMenu, error)
	ValidateToken(ctx context.Context, in *Token, opts ...client.CallOption) (*Token, error)
	CreateRole(ctx context.Context, in *Role, opts ...client.CallOption) (*ResponseRole, error)
	GetRole(ctx context.Context, in *Role, opts ...client.CallOption) (*ResponseRole, error)
	GetAllRoles(ctx context.Context, in *Request, opts ...client.CallOption) (*ResponseRole, error)
	CreateMenu(ctx context.Context, in *Menu, opts ...client.CallOption) (*ResponseMenu, error)
	GetMenu(ctx context.Context, in *Menu, opts ...client.CallOption) (*ResponseMenu, error)
	GetAllMenues(ctx context.Context, in *Request, opts ...client.CallOption) (*ResponseMenu, error)
}

type userDataClient struct {
	c           client.Client
	serviceName string
}

func NewUserDataClient(serviceName string, c client.Client) UserDataClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "auth"
	}
	return &userDataClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *userDataClient) GetUserMenus(ctx context.Context, in *User, opts ...client.CallOption) (*ResponseMenu, error) {
	req := c.c.NewRequest(c.serviceName, "UserData.GetUserMenus", in)
	out := new(ResponseMenu)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataClient) ValidateToken(ctx context.Context, in *Token, opts ...client.CallOption) (*Token, error) {
	req := c.c.NewRequest(c.serviceName, "UserData.ValidateToken", in)
	out := new(Token)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataClient) CreateRole(ctx context.Context, in *Role, opts ...client.CallOption) (*ResponseRole, error) {
	req := c.c.NewRequest(c.serviceName, "UserData.CreateRole", in)
	out := new(ResponseRole)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataClient) GetRole(ctx context.Context, in *Role, opts ...client.CallOption) (*ResponseRole, error) {
	req := c.c.NewRequest(c.serviceName, "UserData.GetRole", in)
	out := new(ResponseRole)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataClient) GetAllRoles(ctx context.Context, in *Request, opts ...client.CallOption) (*ResponseRole, error) {
	req := c.c.NewRequest(c.serviceName, "UserData.GetAllRoles", in)
	out := new(ResponseRole)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataClient) CreateMenu(ctx context.Context, in *Menu, opts ...client.CallOption) (*ResponseMenu, error) {
	req := c.c.NewRequest(c.serviceName, "UserData.CreateMenu", in)
	out := new(ResponseMenu)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataClient) GetMenu(ctx context.Context, in *Menu, opts ...client.CallOption) (*ResponseMenu, error) {
	req := c.c.NewRequest(c.serviceName, "UserData.GetMenu", in)
	out := new(ResponseMenu)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataClient) GetAllMenues(ctx context.Context, in *Request, opts ...client.CallOption) (*ResponseMenu, error) {
	req := c.c.NewRequest(c.serviceName, "UserData.GetAllMenues", in)
	out := new(ResponseMenu)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserData service

type UserDataHandler interface {
	GetUserMenus(context.Context, *User, *ResponseMenu) error
	ValidateToken(context.Context, *Token, *Token) error
	CreateRole(context.Context, *Role, *ResponseRole) error
	GetRole(context.Context, *Role, *ResponseRole) error
	GetAllRoles(context.Context, *Request, *ResponseRole) error
	CreateMenu(context.Context, *Menu, *ResponseMenu) error
	GetMenu(context.Context, *Menu, *ResponseMenu) error
	GetAllMenues(context.Context, *Request, *ResponseMenu) error
}

func RegisterUserDataHandler(s server.Server, hdlr UserDataHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&UserData{hdlr}, opts...))
}

type UserData struct {
	UserDataHandler
}

func (h *UserData) GetUserMenus(ctx context.Context, in *User, out *ResponseMenu) error {
	return h.UserDataHandler.GetUserMenus(ctx, in, out)
}

func (h *UserData) ValidateToken(ctx context.Context, in *Token, out *Token) error {
	return h.UserDataHandler.ValidateToken(ctx, in, out)
}

func (h *UserData) CreateRole(ctx context.Context, in *Role, out *ResponseRole) error {
	return h.UserDataHandler.CreateRole(ctx, in, out)
}

func (h *UserData) GetRole(ctx context.Context, in *Role, out *ResponseRole) error {
	return h.UserDataHandler.GetRole(ctx, in, out)
}

func (h *UserData) GetAllRoles(ctx context.Context, in *Request, out *ResponseRole) error {
	return h.UserDataHandler.GetAllRoles(ctx, in, out)
}

func (h *UserData) CreateMenu(ctx context.Context, in *Menu, out *ResponseMenu) error {
	return h.UserDataHandler.CreateMenu(ctx, in, out)
}

func (h *UserData) GetMenu(ctx context.Context, in *Menu, out *ResponseMenu) error {
	return h.UserDataHandler.GetMenu(ctx, in, out)
}

func (h *UserData) GetAllMenues(ctx context.Context, in *Request, out *ResponseMenu) error {
	return h.UserDataHandler.GetAllMenues(ctx, in, out)
}
